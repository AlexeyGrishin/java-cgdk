package model

/**
 * Предоставляет доступ к различным игровым константам.
 */
class Game(
            /**
             * @return Возвращает некоторое число, которое ваша стратегия может использовать для инициализации генератора
             *         случайных чисел. Данное значение имеет рекомендательный характер, однако позволит более точно
             *         воспроизводить прошедшие игры.
             */
            val randomSeed: Long,

            /**
             * @return Возвращает длительность игры в тиках.
             */
            val tickCount: Int,

            /**
             * @return Возвращает ширину игрового мира.
             */
            val worldWidth: Double,

            /**
             * @return Возвращает высоту игрового мира.
             */
            val worldHeight: Double,

            /**
             * @return Возвращает ординату верхней штанги ворот.
             */
            val goalNetTop: Double,

            /**
             * @return Возвращает ширину ворот.
             */
            val goalNetWidth: Double,

            /**
             * @return Возвращает высоту ворот.
             */
            val goalNetHeight: Double,

            /**
             * @return Возвращает ординату верхней границы игрового поля.
             */
            val rinkTop: Double,

            /**
             * @return Возвращает абсциссу левой границы игрового поля.
             */
            val rinkLeft: Double,

            /**
             * @return Возвращает ординату нижней границы игрового поля.
             */
            val rinkBottom: Double,

            /**
             * @return Возвращает абсциссу правой границы игрового поля.
             */
            val rinkRight: Double,

            /**
             * @return Возвращает длительность состояния вне игры после гола.
             *         В течение этого времени новые забитые голы игнорируются,
             *         а действия не требуют затрат выносливости.
             */
            val afterGoalStateTickCount: Int,

            /**
             * @return Возвращает длительность дополнительного времени.
             *         Дополнительное время наступает в случае ничейного счёта на момент окончания основного времени.
             *         Если за основное время не было забито ни одного гола, вратари обоих игроков убираются с поля.
             */
            val overtimeTickCount: Int,

            /**
             * @return Возвращает длительность задержки, применяемой к хоккеисту
             *         после совершения им большинства действий ({@code move.action}).
             *         В течение этого времени хоккеист не может совершать новые действия.
             */
            val defaultActionCooldownTicks: Int,

            /**
             * @return Возвращает длительность задержки, применяемой к хоккеисту
             *         после совершения им действия замах ({@code ActionType.SWING}).
             *         В течение этого времени хоккеист не может совершать новые действия.
             */
            val swingActionCooldownTicks: Int,

            /**
             * @return Возвращает длительность задержки, применяемой к хоккеисту
             *         после отмены им удара ({@code ActionType.CANCEL_STRIKE}).
             *         В течение этого времени хоккеист не может совершать новые действия.
             */
            val cancelStrikeActionCooldownTicks: Int,

            /**
             * @return Возвращает длительность задержки, применяемой к хоккеисту
             *         в случае потери шайбы вследствие воздействия других хоккеистов.
             *         В течение этого времени хоккеист не может совершать действия.
             */
            val actionCooldownTicksAfterLosingPuck: Int,

            /**
             * @return Возвращает длину клюшки хоккеиста. Хоккеист может воздействовать на игровой объект,
             *         если и только если расстояние от центра хоккеиста до центра объекта не превышает эту величину.
             */
            val stickLength: Double,

            /**
             * @return Возвращает сектор клюшки хоккеиста. Хоккеист может воздействовать на игровой объект,
             *         если и только если угол между направлением хоккеиста и вектором из центра хоккеиста в центр объекта
             *         не превышает половину этой величины.
             */
            val stickSector: Double,

            /**
             * @return Возвращает сектор, ограничивающий направление паса.
             */
            val passSector: Double,

            /**
             * @return Возвращает базовое значение атрибута хоккеиста.
             *         Данная величина используется как коэффициент в различных игровых формулах.
             */
            val hockeyistAttributeBaseValue: Int,

            /**
             * @return Возвращает минимальный шанс на совершение любого вероятностного действия.
             */
            val minActionChance: Double,

            /**
             * @return Возвращает максимальный шанс на совершение любого вероятностного действия.
             */
            val maxActionChance: Double,

            /**
             * @return Возвращает стандартное отклонение распределения Гаусса для угла удара ({@code ActionType.STRIKE})
             *         хоккеиста при базовом значении атрибута ловкость. Чем выше ловкость конкретного хоккеиста,
             *         тем точнее его удар.
             */
            val strikeAngleDeviation: Double,

            /**
             * @return Возвращает стандартное отклонение распределения Гаусса для угла паса ({@code ActionType.PASS})
             *         хоккеиста при базовом значении атрибута ловкость. Чем выше ловкость конкретного хоккеиста,
             *         тем точнее его пас.
             */
            val passAngleDeviation: Double,

            /**
             * @return Возвращает базовый шанс подобрать шайбу, не контролируемую другим хоккеистом.
             *         Максимальный из атрибутов ловкость и подвижность хоккеиста увеличивает шанс на захват.
             *         Скорость шайбы уменьшает шанс на захват.
             */
            val pickUpPuckBaseChance: Double,

            /**
             * @return Возвращает базовый шанс отнять шайбу у другого хоккеиста.
             *         Максимальный из атрибутов сила и ловкость хоккеиста, отнимающего шайбу, увеличивает шанс на захват.
             *         Максимальный из атрибутов стойкость и подвижность текущего владельца шайбы уменьшает шанс на её потерю.
             */
            val takePuckAwayBaseChance: Double,

            /**
             * @return Возвращает длительность замаха, после достижения которой сила удара не увеличивается.
             */
            val maxEffectiveSwingTicks: Int,

            /**
             * @return Возвращает коэффициент силы удара без замаха.
             */
            val strikePowerBaseFactor: Double,

            /**
             * @return Возвращает увеличение коэффициента силы удара за каждый тик замаха.
             *         Максимальное количество учитываемых тиков ограничено значением {@code maxEffectiveSwingTicks}.
             */
            val strikePowerGrowthFactor: Double,

            /**
             * @return Возвращает базовый шанс ударить шайбу. Базовый шанс не зависит от того,
             *         контролирует шайбу другой хоккеист или нет, однако на результирующий шанс удара
             *         по свободной и контролируемой шайбе влияют разные атрибуты хоккеиста
             *         (смотрите документацию к {@code pickUpPuckBaseChance} и {@code takePuckAwayBaseChance}).
             *         Если хоккеист, совершающий удар, контролирует шайбу, то вероятность удара всегда будет 100%.
             */
            val strikePuckBaseChance: Double,

            /**
             * @return Возвращает шанс ударом ({@code ActionType.STRIKE}) сбить с ног другого хоккеиста при максимальной
             *         длительности замаха. Среднее значение атрибутов сила и ловкость хоккеиста, совершающего удар,
             *         увеличивает шанс сбить с ног. Значение атрибута стойкость атакуемого хоккеиста уменьшает шанс на падение.
             */
            val knockdownChanceFactor: Double,

            /**
             * @return Возвращает количество тиков, по прошествии которого хоккеист восстановится после падения при базовом
             *         значении атрибута подвижность. Чем выше подвижность, тем быстрее восстановление.
             */
            val knockdownTicksFactor: Double,

            /**
             * @return Возвращает максимальную допустимую скорость для выполнения замены хоккеиста.
             */
            val maxSpeedToAllowSubstitute: Double,

            /**
             * @return Возвращает высоту зоны, в которой может быть выполнена замена хоккеиста. Зона расположена вдоль верхней
             *         границы игровой площадки. Замена может быть выполнена только на своей половине поля.
             */
            val substitutionAreaHeight: Double,

            /**
             * @return Возвращает коэффициент силы паса. Умножается на устанавливаемое стратегией в интервале
             *         [{@code 0.0}, {@code 1.0}] значение силы паса ({@code move.passPower}).
             */
            val passPowerFactor: Double,

            /**
             * @return Возвращает максимальное значение выносливости хоккеиста. Выносливость тратится на перемещение
             *         и совершение хоккеистом различных действий. Каждый тик может восстановиться небольшое количество
             *         выносливости в зависимости от состояния хоккеиста ({@code hockeyist.state}). По мере расходования
             *         выносливости все атрибуты (соответственно, и эффективность всех действий) хоккеиста равномерно
             *         уменьшаются и достигают значения {@code zeroStaminaHockeyistEffectivenessFactor} (от начальных
             *         показателей) при падении выносливости до нуля. Хоккеист не восстанавливает выносливость в состояниях
             *         {@code HockeyistState.SWINGING} и {@code HockeyistState.KNOCKED_DOWN}.
             */
            val hockeyistMaxStamina: Double,

            /**
             * @return Возвращает значение, на которое увеличивается выносливость хоккеиста за каждый тик в состоянии
             *         {@code HockeyistType.ACTIVE}.
             */
            val activeHockeyistStaminaGrowthPerTick: Double,

            /**
             * @return Возвращает значение, на которое увеличивается выносливость хоккеиста за каждый тик в состоянии
             *         {@code HockeyistType.RESTING}.
             */
            val restingHockeyistStaminaGrowthPerTick: Double,

            /**
             * @return Возвращает коэффициент эффективности действий хоккеиста при падении его выносливости до нуля.
             */
            val zeroStaminaHockeyistEffectivenessFactor: Double,

            /**
             * @return Возвращает количество выносливости, которое необходимо затратить на максимальное по модулю
             *         ускорение/замедление хоккеиста ({@code move.speedUp}) за 1 тик. Для меньших значений ускорения затраты
             *         выносливости пропорционально падают.
             */
            val speedUpStaminaCostFactor: Double,

            /**
             * @return Возвращает количество выносливости, которое необходимо затратить на максимальный по модулю
             *         угол поворота хоккеиста ({@code move.turn}) за 1 тик. Для меньших значений угла поворота затраты
             *         выносливости пропорционально падают.
             */
            val turnStaminaCostFactor: Double,

            /**
             * @return Возвращает количество выносливости, которое необходимо затратить на совершение действия
             *         {@code ActionType.TAKE_PUCK}.
             */
            val takePuckStaminaCost: Double,

            /**
             * @return Возвращает количество выносливости, которое необходимо затратить на совершение действия
             *         {@code ActionType.SWING}.
             */
            val swingStaminaCost: Double,

            /**
             * @return Возвращает базовое количество выносливости, которое необходимо затратить на совершение действия
             *         {@code ActionType.STRIKE}.
             */
            val strikeStaminaBaseCost: Double,

            /**
             * @return Возвращает увеличение затрат выносливости на удар ({@code ActionType.STRIKE}) за каждый тик замаха.
             *         Максимальное количество учитываемых тиков ограничено значением {@code maxEffectiveSwingTicks}.
             */
            val strikeStaminaCostGrowthFactor: Double,

            /**
             * @return Возвращает количество выносливости, которое необходимо затратить на совершение действия
             *         {@code ActionType.CANCEL_STRIKE}.
             */
            val cancelStrikeStaminaCost: Double,

            /**
             * @return Возвращает количество выносливости, которое необходимо затратить на совершение действия
             *         {@code ActionType.PASS}.
             */
            val passStaminaCost: Double,

            /**
             * @return Возвращает максимальную скорость перемещения вратаря.
             */
            val goalieMaxSpeed: Double,

            /**
             * @return Возвращает максимальную скорость перемещения полевого хоккеиста.
             */
            val hockeyistMaxSpeed: Double,

            /**
             * @return Возвращает модуль скорости, добавляемой хоккеисту, попавшему под удар силы 1.0.
             */
            val struckHockeyistInitialSpeedFactor: Double,

            /**
             * @return Возвращает модуль ускорения, приобретаемого хоккеистом, при {@code move.speedUp} равном 1.0,
             *         базовом значении атрибута подвижность и максимальном запасе выносливости.
             *         Направление ускорения совпадает с направлением хоккеиста.
             *         В игре отсутствует специальное ограничение на максимальную скорость хоккеиста, однако все
             *         игровые объекты подвержены воздействию силы трения, которая уменьшает модуль их скорости каждый тик.
             *         Чем больше скорость, тем на большую величину она уменьшается.
             */
            val hockeyistSpeedUpFactor: Double,

            /**
             * @return Возвращает модуль ускорения, приобретаемого хоккеистом, при {@code move.speedUp} равном -1.0,
             *         базовом значении атрибута подвижность и максимальном запасе выносливости.
             *         Направление ускорения противоположно направлению хоккеиста.
             *         В игре отсутствует специальное ограничение на максимальную скорость хоккеиста, однако все
             *         игровые объекты подвержены воздействию силы трения, которая уменьшает модуль их скорости каждый тик.
             *         Чем больше скорость, тем на большую величину она уменьшается.
             */
            val hockeyistSpeedDownFactor: Double,

            /**
             * @return Возвращает максимальный модуль угла поворота хоккеиста за тик при базовом значении атрибута подвижность
             *         и максимальном запасе выносливости.
             */
            val hockeyistTurnAngleFactor: Double,

            /**
             * @return Возвращает значение атрибута сила для хоккеиста-универсала.
             */
            val versatileHockeyistStrength: Int,

            /**
             * @return Возвращает значение атрибута стойкость для хоккеиста-универсала.
             */
            val versatileHockeyistEndurance: Int,

            /**
             * @return Возвращает значение атрибута ловкость для хоккеиста-универсала.
             */
            val versatileHockeyistDexterity: Int,

            /**
             * @return Возвращает значение атрибута подвижность для хоккеиста-универсала.
             */
            val versatileHockeyistAgility: Int,

            /**
             * @return Возвращает значение атрибута сила для нападающего.
             */
            val forwardHockeyistStrength: Int,

            /**
             * @return Возвращает значение атрибута стойкость для нападающего.
             */
            val forwardHockeyistEndurance: Int,

            /**
             * @return Возвращает значение атрибута ловкость для нападающего.
             */
            val forwardHockeyistDexterity: Int,

            /**
             * @return Возвращает значение атрибута подвижность для нападающего.
             */
            val forwardHockeyistAgility: Int,

            /**
             * @return Возвращает значение атрибута сила для защитника.
             */
            val defencemanHockeyistStrength: Int,

            /**
             * @return Возвращает значение атрибута стойкость для защитника.
             */
            val defencemanHockeyistEndurance: Int,

            /**
             * @return Возвращает значение атрибута ловкость для защитника.
             */
            val defencemanHockeyistDexterity: Int,

            /**
             * @return Возвращает значение атрибута подвижность для защитника.
             */
            val defencemanHockeyistAgility: Int,

            /**
             * @return Возвращает минимально возможное значение любого атрибута для хоккеиста со случайными параметрами.
             */
            val minRandomHockeyistParameter: Int,

            /**
             * @return Возвращает максимально возможное значение любого атрибута для хоккеиста со случайными параметрами.
             */
            val maxRandomHockeyistParameter: Int,

            /**
             * @return Возвращает модуль скорости, устанавливаемой шайбе, попавшей под удар силы 1.0.
             */
            val struckPuckInitialSpeedFactor: Double,

            /**
             * @return Возвращает расстояние от центра хоккеиста, контролирующего шайбу, до центра шайбы.
             */
            val puckBindingRange: Double
            )
