package model

/**
 * Содержит данные о текущем состоянии игрока.
 */
class Player(
              /**
               * @return Возвращает уникальный идентификатор игрока.
               */
              val id: Long,

              /**
               * @return Возвращает {@code true} в том и только в том случае, если этот игрок ваш.
               */
              val me: Boolean,

              /**
               * @return Возвращает имя игрока.
               */
              val name: String,

              /**
               * @return Возвращает количество шайб, заброшенных хоккеистами данного игрока в сетку противника.
               *         Шайбы, заброшенные во время состояния вне игры, не влияют на этот счётчик.
               */
              val goalCount: Int,

              /**
               * @return Возвращает специальный флаг --- показатель того, что стратегия игрока <<упала>>.
               *         Более подробную информацию можно найти в документации к игре.
               */
              val strategyCrashed: Boolean,

              /**
               * @return Возвращает ординату верхней штанги ворот.
               */
              val netTop: Double,

              /**
               * @return Возвращает абсциссу левой границы ворот.
               */
              val netLeft: Double,

              /**
               * @return Возвращает ординату нижней штанги ворот.
               */
              val netBottom: Double,

              /**
               * @return Возвращает абсциссу правой границы ворот.
               */
              val netRight: Double,

              /**
               * @return Возвращает абсциссу ближайшей к вратарю вертикальной границы ворот.
               *         Соответствует одному из значений {@code netLeft} или {@code netRight}.
               */
              val netFront: Double,

              /**
               * @return Возвращает абсциссу дальней от вратаря вертикальной границы ворот.
               *         Соответствует одному из значений <code>netLeft</code> или {@code netRight}.
               */
              val netBack: Double,

              /**
               * @return Возвращает {@code true} в том и только в том случае, если игрок только что забил гол.
               *         <p/>
               *         Вместе с установленным флагом {@code justMissedGoal} другого игрока означает,
               *         что сейчас состояние вне игры и новые голы не будут засчитаны.
               *         Длительность состояния вне игры составляет {@code game.afterGoalStateTickCount} тиков.
               */
              val justScoredGoal: Boolean,

              /**
               * @return Возвращает {@code true} в том и только в том случае, если игрок только что пропустил гол.
               *         <p/>
               *         Вместе с установленным флагом {@code justScoredGoal} другого игрока означает,
               *         что сейчас состояние вне игры и новые голы не будут засчитаны.
               *         Длительность состояния вне игры составляет {@code game.afterGoalStateTickCount} тиков.
               */
              val justMissedGoal: Boolean
)